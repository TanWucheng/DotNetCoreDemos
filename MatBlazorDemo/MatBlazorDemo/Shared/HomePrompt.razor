@inject IJSRuntime JS;

<style>
    .paper-style {
        margin: 1em 0;
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
        padding: 1.5em 1em;
        background-color: #e0f7fa;
    }
</style>

<MatPaper Elevation="3" class="paper-style">
    <MatIcon Icon="message" style="mr-2"></MatIcon>
    <strong>本网站基于ASP.NET Core Blazor构建，DotNet SDK版本为</strong>
    <a target="_blank" class="font-weight-bold" href="https://dotnet.microsoft.com/download/">@SdkVersion</a>
</MatPaper>

<MatPaper Elevation="3" class="paper-style">
    <MatIcon Icon="message" style="mr-2"></MatIcon>
    <strong>本网站用户界面组件库使用</strong>
    <a target="_blank" class="font-weight-bold" href="https://www.matblazor.com/">MatBlazor</a>
    <strong>，这是一套Material Design风格的</strong>
    <a target="_blank" class="font-weight-bold" href="https://docs.microsoft.com/zh-cn/aspnet/core/blazor/">Blazor</a>
    <strong>组件</strong>
</MatPaper>

<MatPaper Elevation="3" class="paper-style">
    <MatIcon Icon="message" style="mr-2"></MatIcon>
    <strong>右下角二次元看板娘来自</strong>
    <a target="_blank" class="font-weight-bold"
       href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">hexo-helper-live2d</a>
</MatPaper>

<MatPaper Elevation="3" class="paper-style">
    <MatIcon Icon="message" style="mr-2"></MatIcon>
    <strong>悬浮HTML 5音乐播放器来自</strong>
    <a target="_blank" class="font-weight-bold" href="https://github.com/moeshin/QPlayer2">QPlayer2</a>
</MatPaper>

<MatPaper Elevation="3" class="paper-style">
    <MatIcon Icon="message" style="mr-2"></MatIcon>
    <strong>
        页面点击浮动文字效果的实现请
        <a class="font-weight-bold" href="javascript:void(0);" @onclick="OpenDialog">点此</a>
        查看代码
    </strong>
</MatPaper>

<MatDialog @bind-IsOpen="@dialogIsOpen" CanBeClosed="false" Style="margin-top:4em;height:80%;">
    <MatDialogTitle>JavaScript Code</MatDialogTitle>
    <MatDialogContent>
        <code>@jsCode</code>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@CopyToClipboard">复制</MatButton>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">关闭</MatButton>
    </MatDialogActions>
</MatDialog>

<div aria-live="polite" aria-atomic="true">
    <div id="copySuccessToast" style="position: absolute; top: 5em; right: 0; z-index: 8;" aria-live="assertive"
         aria-atomic="true" class="toast">
        <div class="toast-header">
            <strong class="mr-auto">提示</strong>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body">
            已复制到剪贴板
        </div>
    </div>
</div>

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string SdkVersion { get; set; }

    private const string jsCode = @"document.addEventListener('DOMContentLoaded', function () {
let arrIndex = 0;
document.body.addEventListener('click', function (e) {
let r = Math.random() * 255;
let g = Math.random() * 255;
let b = Math.random() * 255;
var color = 'rgb(' + r + ',' + g + ',' + b + ')';
var arr = ['HTML', 'JavaScript', 'CSS', 'C#', '.NET', 'ASP.NET', '.NET Core', 'ASP.NET Core', 'SqlServer', 'MySQL',
'MongoDB', 'SQLite', 'Oracle', 'Electron', 'Progressive Web App', 'Python', 'ASP.NET Core Blazor', 'ASP.NET Web API',
'ASP.NET MVC', 'Vue', 'React', 'Xamarin', 'UWP', 'WPF', 'gRPC Service'];
var promptSpan = document.createElement('span');
promptSpan.innerText = arr[arrIndex];
arrIndex = (arrIndex + 1) % arr.length;
var x = e.pageX,
y = e.pageY;
var size = Math.random() * 10 + 8 + 'px';
promptSpan.style.zIndex = 99999;
promptSpan.style.top = `${y - 20}px`;
promptSpan.style.left = `${x}px`;
promptSpan.style.position = 'absolute';
promptSpan.style.fontWeight = '800';
promptSpan.style.fontSize = size;
promptSpan.style.color = color;
document.body.append(promptSpan);
promptSpan.animate([
// keyframes
{ transform: 'translateY(-200px)' }
], {
// timing options
duration: 1500,
iterations: 1
}).onfinish = () => {
promptSpan.remove();
};
}, false);
};";

    private bool dialogIsOpen;

    private void OpenDialog()
    {
        dialogIsOpen = true;
    }

    private async void CopyToClipboard()
    {
        var result = await JS.InvokeAsync<bool>("copyToClipboard", jsCode);
    }
}
