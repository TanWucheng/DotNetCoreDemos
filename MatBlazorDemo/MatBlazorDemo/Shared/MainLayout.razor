@inherits LayoutComponentBase
@inject IMatToaster Toaster
@inject IIdentityService IdentityService
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Whe

@if (BlazorSession.Current.Browser == null)
{
    BlazorSession.Current.SetTimeout(10, StateHasChanged);
    return;
}

@code
{
    private string _viewMode;
}

@if (_viewMode == null)
{
    @if (BlazorSession.Current.Browser.GetMemoryItem("LogonOk") as string != "OK")
    {
        if (Whe.EnvironmentName == "Development")
        {
            <div style="display:flex;flex-direction:column;align-items:center;width:100%;padding:32px;">
                <h1>
                    Development
                </h1>
                <div>
                    In Development mode , you can use this app directly.
                </div>
                <div>
                    In Production mode , you must login into linux via ssh localhost:22
                </div>
                <button class="btn btn-primary" style="margin:32px;width:100px;" @onclick="LoginForDev">
                    OK
                </button>
            </div>

            void LoginForDev()
            {
                BlazorSession.Current.Browser.SetMemoryItem("LogonOk", "OK");
            }

            return;
        }
        _viewMode = "login";
    }
}

@if (_viewMode == "login")
{
    <div class="login-container">
        <div class="login-box">
            <h2>请登录</h2>
            <p>
                <MatTextField @bind-Value="@_loginDialogName"
                              Label="用户名"
                              Icon="person"
                              FullWidth="true"
                              HelperText="用户名长度为8~16"
                              Required="true"></MatTextField>
            </p>
            <p>
                <MatTextField @bind-Value="@_loginDialogPassword"
                              Label="密码"
                              Icon="lock"
                              Type="password"
                              FullWidth="true"
                              HelperText="密码长度为8~16"
                              Required="true"></MatTextField>
            </p>
            <p>
                <MatButton OnClick="@DoLogin" Raised="true">登陆</MatButton>
                <MatButton OnClick="@(e => { _dialogIsOpen = false; })" Dense="true">取消</MatButton>
            </p>
        </div>
    </div>
    <MatToastContainer />
}
else
{
    <MatAppBar Style="z-index: 100;" Class="mat">
        <MatAppBarRow>
            <MatAppBarSection>
                <MatIconButton Icon="menu" OnClick="@((e) => MenuButtonClicked())"></MatIconButton>
                <MatAppBarTitle>MatBlazor练习示例</MatAppBarTitle>
            </MatAppBarSection>
            <MatAppBarSection Align="@MatAppBarSectionAlign.End">
                @if (Whe.EnvironmentName == "Development")
                {
                    <MatTooltip Tooltip="临时用户" Position="@MatTooltipPosition.Bottom">
                        <MatIconButton RefBack="@context" Icon="person">
                        </MatIconButton>
                    </MatTooltip>
                }
                else
                {
                    <MatTooltip Tooltip="@_loginDialogName" Position="@MatTooltipPosition.Bottom">
                        <MatIconButton RefBack="@context" Icon="person">
                        </MatIconButton>
                    </MatTooltip>
                }
                <MatIconButton Icon="logout" OnClick="@OnClick"></MatIconButton>
            </MatAppBarSection>
        </MatAppBarRow>
    </MatAppBar>

    <MatDrawerContainer Style="width: 100vw; height: 100vh;" Class="mat">

        <MatHidden Breakpoint="@MatBreakpoint.SM" Direction="@MatHiddenDirection.Up" HiddenChanged="@ModelDrawerHiddenChanged">
            <ChildContent>
                <MatDrawer Style="box-shadow: 2px 0px 2px 0px rgba(199, 199, 199, 0.29);" @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Modal">
                    <MatAppBarAdjust></MatAppBarAdjust>
                    <NavMenu />
                </MatDrawer>
            </ChildContent>
            <ElseContent>
                <MatDrawer Style="box-shadow: 2px 0px 2px 0px rgba(199, 199, 199, 0.29);" @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Dismissible">
                    <MatAppBarAdjust></MatAppBarAdjust>
                    <NavMenu />
                </MatDrawer>
            </ElseContent>
        </MatHidden>


        <MatDrawerContent Class="mdc-theme--background" Style="--mdc-theme-background: #fafafa;">
            <MatAppBarAdjust></MatAppBarAdjust>
            <div class="body-wrapper container pt-5">
                @Body
            </div>
        </MatDrawerContent>

    </MatDrawerContainer>

    <MatDialog @bind-IsOpen="@_dialogIsOpen">
        <MatDialogTitle>提示</MatDialogTitle>
        <MatDialogContent>
            <MatHeadline6>现在退出吗？</MatHeadline6>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@DoLogout" Raised="true">确认</MatButton>
            <MatButton OnClick="@(e => { _dialogIsOpen = false; })" Dense="true">取消</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatSnackbar @bind-IsOpen="@_lazySnackbarIsOpen">
        <MatSnackbarContent>If you like MatBlazor, please put a star on GitHub.</MatSnackbarContent>
        <MatSnackbarActions>
            @* <MatButton Raised="true">Star</MatButton> *@
            <MatIconButton Icon="@MatIconNames.Stars" Link="https://github.com/BlazorComponents/MatBlazor" style="color: white;" target="_blank"></MatIconButton>
        </MatSnackbarActions>
    </MatSnackbar>
    <MatToastContainer />
}

@code {
    private bool _lazySnackbarIsOpen;
    private bool _navMenuOpened = true;
    private bool _dialogIsOpen;
    private string _loginDialogName = string.Empty;
    private string _loginDialogPassword = string.Empty;


    protected void ModelDrawerHiddenChanged(bool hidden)
    {
        if (!hidden)
        {
            _navMenuOpened = false;
        }
    }

    public void OnClick(MouseEventArgs e)
    {
        _dialogIsOpen = true;
    }

    void MenuButtonClicked()
    {
        _navMenuOpened = !_navMenuOpened;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //await Task.Delay(TimeSpan.FromSeconds(5))
        //     .ContinueWith((_) => { this._lazySnackbarIsOpen = true; });
    }

    private void DoLogout()
    {
        _dialogIsOpen = false;
        BlazorSession.Current.Browser.SetMemoryItem("LogonOk", string.Empty);
        _viewMode = "login";
    }

    private void DoLogin()
    {
        var result = IdentityService.LoginAsync(_loginDialogName, _loginDialogPassword);
        if (result.Result)
        {
            _loginDialogName = string.Empty;
            _loginDialogPassword = string.Empty;
            Toaster.Add("登陆成功", MatToastType.Info, "消息", "check_circle");
            BlazorSession.Current.Browser.SetMemoryItem("LogonOk", "OK");
            _viewMode = null;
        }
        else
        {
            Toaster.Add("登陆失败，请检查输入！", MatToastType.Danger, "提示", "warning");
            BlazorSession.Current.Browser.SetMemoryItem("LogonOk", "NO");
            _viewMode = "login";
        }
    }
}