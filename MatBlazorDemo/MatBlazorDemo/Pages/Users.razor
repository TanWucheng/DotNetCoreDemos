@page "/users"
@using System.Linq
@using MatBlazor.Model.Model
@using MatBlazor.Model.ViewModel
@inject IMatToaster Toaster
@inject IUserService UserService

<h3>用户清单</h3>

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        <MatButton Raised="true" @bind-Disabled="@_viewModel.BatchDelDisabled" TrailingIcon="delete">批量删除</MatButton>
    </p>
    <MatTable Items="@_viewModel.UserModels"
              LoadInitialData="true"
              Striped="true"
              AllowSelection="true"
              FilterByColumnName="Name"
              DebounceMilliseconds="150"
              UseSortHeaderRow="true"
              class="mat-elevation-z5">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="@SortData">
                <th>
                    <MatCheckbox Value="@_viewModel.IsCheckAll"
                                 ValueChanged="@((bool? s) => OnChangeAllSelected(s))"
                                 ValueExpression="@(() => _viewModel.IsCheckAll)"
                                 Indeterminate="true"></MatCheckbox>
                </th>
                <MatSortHeader SortId="id">Id</MatSortHeader>
                <th>姓名</th>
                <th>性别</th>
                <th>生日</th>
                <th>电话号码</th>
                <th>住址</th>
                <th></th>
            </MatSortHeaderRow>
        </MatTableHeader>
        <MatTableRow>
            <td>
                <MatCheckbox Value="@context.Checked"
                             ValueChanged="@((bool value) => OnValueChanged(context, value))"
                             ValueExpression="@(() => context.Checked)">
                </MatCheckbox>

            </td>
            <td>@string.Format("{0:d}", @context.User.Id)</td>
            <td>@context.User.Name</td>
            <td>@context.User.Sex</td>
            <td>@context.User.Birthday</td>
            <td>@context.User.PhoneNum</td>
            <td>@context.User.Address</td>
            <td>
                <MatButton Dense="true" TrailingIcon="edit">编辑</MatButton>
                <MatButton Dense="true" TrailingIcon="delete">删除</MatButton>
            </td>
        </MatTableRow>
    </MatTable>
}

@code {
    private UserViewModel _viewModel;
    private UserModel[] _sortedData;

    protected override async Task OnInitializedAsync()
    {
        var result = await UserService.GetAllUsersAsync();
        _viewModel = new UserViewModel
        {
            UserModels = (from user in result select new UserModel { User = user, Checked = false }).ToArray(),
            BatchDelDisabled = true
        };
    }

    private void SortData(MatSortChangedEvent sort)
    {
        _sortedData = _viewModel.UserModels;
        if (sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)) return;
        Comparison<UserModel> comparison = sort.SortId switch
        {
            "id" => (s1, s2) => s1.User.Id.CompareTo(s2.User.Id),
            _ => null
        };
        if (comparison != null)
        {
            Array.Sort(_sortedData, sort.Direction == MatSortDirection.Desc ? (s1, s2) => -1 * comparison(s1, s2) : comparison);
        }
    }

    private void CheckBoxOnClick(MouseEventArgs args)
    {
        //var count = _viewModel.UserModels.Count(x => x.Checked);
        //Toaster.Add($"选中的数量:{count}", MatToastType.Info, "消息", "check_circle");
        Toaster.Add(args.Type, MatToastType.Info, "OnChange");
    }

    private void OnChangeAllSelected(bool? s)
    {
        _viewModel.IsCheckAll = s;
        _viewModel.BatchDelDisabled = s ?? false;
        if (_viewModel.IsCheckAll == null) return;

        foreach (var element in _viewModel.UserModels)
        {
            element.Checked = _viewModel.IsCheckAll == true;
        }
    }

    Task OnValueChanged(UserModel element, bool s)
    {
        // element.Checked = s;

        _viewModel.UserModels.First(x => x.User.Id == element.User.Id).Checked = s;

        var all = _viewModel.UserModels.All(r => r.Checked);
        var any = all || _viewModel.UserModels.Any(r => r.Checked);

        _viewModel.BatchDelDisabled = !any;

        if (any && !all)
        {
            _viewModel.IsCheckAll = null;
        }
        else
        {
            _viewModel.IsCheckAll = all;
        }

        return Task.CompletedTask;
    }
}
